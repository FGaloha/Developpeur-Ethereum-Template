{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "proposalId",
          "type": "uint8"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "WorkflowStatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "getOneProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getVoter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votedProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowStatus",
      "outputs": [
        {
          "internalType": "enum Voting.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d55a2746fbcc860ffb44cc72d217cf74850b833d477d4133f7919743300193a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1190047",
    "logsBloom": "0x
    "blockHash": "0x8fe6d3a168f1b03cb81619df24278080307ee3ca63cd550e3f55981edfa8a4fd",
    "transactionHash": "0x2d55a2746fbcc860ffb44cc72d217cf74850b833d477d4133f7919743300193a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x2d55a2746fbcc860ffb44cc72d217cf74850b833d477d4133f7919743300193a",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8fe6d3a168f1b03cb81619df24278080307ee3ca63cd550e3f55981edfa8a4fd"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1190047",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "47daa46c97b5e37a96c0c1ed81554934",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalId\",\"type\":\"uint8\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getOneProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStatus\",\"outputs\":[{\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Flavia Gallois\",\"kind\":\"dev\",\"methods\":{\"addProposal(string)\":{\"details\":\"Only the registered voters can use this method\",\"params\":{\"_desc\":\"The description of the proposal made by the voter\"}},\"addVoter(address)\":{\"details\":\"Only the owner of the contract can use this method\",\"params\":{\"_addr\":\"The address of the voter to register\"}},\"endProposalsRegistering()\":{\"details\":\"Only the owner of the contract can use this method\"},\"endVotingSession()\":{\"details\":\"Only the owner of the contract can use this method\"},\"getOneProposal(uint8)\":{\"details\":\"Only the registered voters can use this method\",\"params\":{\"_id\":\"The identifier of a specific proposal\"},\"returns\":{\"_0\":\"Proposal which contains the description of the proposal and the number of votes it got so far\"}},\"getVoter(address)\":{\"details\":\"Only the registered voters can use this method\",\"params\":{\"_addr\":\"Address of the voter we look the information for\"},\"returns\":{\"_0\":\"Voter which contains the vote, registration status & voting status of a voter\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVote(uint8)\":{\"details\":\"Only the registered voters can use this method\",\"params\":{\"_id\":\"The identifier of the chosen proposal\"}},\"startProposalsRegistering()\":{\"details\":\"Only the owner of the contract can use this method\"},\"startVotingSession()\":{\"details\":\"Only the owner of the contract can use this method\"},\"tallyVotes()\":{\"details\":\"Only the owner of the contract can use this method. Size limit of proposalsArray avoid DOS risk.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A simple voting contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(string)\":{\"notice\":\"Add a proposal to the list of proposals voted\"},\"addVoter(address)\":{\"notice\":\"Add an address in the list of voters\"},\"endProposalsRegistering()\":{\"notice\":\"End the proposals registration phase\"},\"endVotingSession()\":{\"notice\":\"End the voting session phase\"},\"getOneProposal(uint8)\":{\"notice\":\"Get the information of a proposal\"},\"getVoter(address)\":{\"notice\":\"Get the information of a voter identified by his address.\"},\"setVote(uint8)\":{\"notice\":\"Vote for a proposal\"},\"startProposalsRegistering()\":{\"notice\":\"Start the proposals registration phase\"},\"startVotingSession()\":{\"notice\":\"Start the voting session phase after the proposal registration ended\"},\"tallyVotes()\":{\"notice\":\"Calculate the winning proposal after the vote phase ended\"}},\"notice\":\"You can use this contract to organize a vote, for a small organization, in order to choose a proposal among several proposals (limited number) made by registered voters\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A simple voting contract\\n/// @author Flavia Gallois\\n/// @notice You can use this contract to organize a vote, for a small organization, in order to choose a proposal among several proposals (limited number) made by registered voters\\ncontract Voting is Ownable {\\n    uint256 public winningProposalID;\\n\\n    struct Voter {\\n        bool isRegistered;\\n        bool hasVoted;\\n        uint256 votedProposalId;\\n    }\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    enum WorkflowStatus {\\n        RegisteringVoters,\\n        ProposalsRegistrationStarted,\\n        ProposalsRegistrationEnded,\\n        VotingSessionStarted,\\n        VotingSessionEnded,\\n        VotesTallied\\n    }\\n\\n    WorkflowStatus public workflowStatus;\\n\\n    Proposal[255] internal proposalsArray;\\n    uint256 internal proposalsLength;\\n\\n    mapping(address => Voter) internal voters;\\n\\n    event VoterRegistered(address voterAddress);\\n    event WorkflowStatusChange(\\n        WorkflowStatus previousStatus,\\n        WorkflowStatus newStatus\\n    );\\n\\n    event ProposalRegistered(uint256 proposalId);\\n    event Voted(address voter, uint8 proposalId);\\n\\n    modifier onlyVoters() {\\n        require(voters[msg.sender].isRegistered, \\\"Not a voter\\\");\\n        _;\\n    }\\n\\n    // ::::::::::::: GETTERS ::::::::::::: //\\n\\n    /// @notice Get the information of a voter identified by his address.\\n    /// @dev Only the registered voters can use this method\\n    /// @param _addr Address of the voter we look the information for\\n    /// @return Voter which contains the vote, registration status & voting status of a voter\\n    function getVoter(address _addr)\\n        external\\n        view\\n        onlyVoters\\n        returns (Voter memory)\\n    {\\n        return voters[_addr];\\n    }\\n\\n    /// @notice Get the information of a proposal\\n    /// @dev Only the registered voters can use this method\\n    /// @param _id The identifier of a specific proposal\\n    /// @return Proposal which contains the description of the proposal and the number of votes it got so far\\n    function getOneProposal(uint8 _id)\\n        external\\n        view\\n        onlyVoters\\n        returns (Proposal memory)\\n    {\\n        return proposalsArray[_id];\\n    }\\n\\n    // ::::::::::::: REGISTRATION ::::::::::::: //\\n\\n    /// @notice Add an address in the list of voters\\n    /// @dev Only the owner of the contract can use this method\\n    /// @param _addr The address of the voter to register\\n    function addVoter(address _addr) external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Voters registration not open\\\"\\n        );\\n        require(voters[_addr].isRegistered != true, \\\"Already registered\\\");\\n\\n        voters[_addr].isRegistered = true;\\n        emit VoterRegistered(_addr);\\n    }\\n\\n    // ::::::::::::: PROPOSAL ::::::::::::: //\\n\\n    /// @notice Add a proposal to the list of proposals voted\\n    /// @dev Only the registered voters can use this method\\n    /// @param _desc The description of the proposal made by the voter\\n    function addProposal(string calldata _desc) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"Proposals session not open\\\"\\n        );\\n        require(bytes(_desc).length > 0, \\\"Missing description\\\");\\n        require(proposalsLength < 255, \\\"Max proposals reached\\\");\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        proposalsArray[proposalsLength] = proposal;\\n        ++proposalsLength;\\n        emit ProposalRegistered(proposalsLength - 1);\\n    }\\n\\n    // ::::::::::::: VOTE ::::::::::::: //\\n\\n    /// @notice Vote for a proposal\\n    /// @dev Only the registered voters can use this method\\n    /// @param _id The identifier of the chosen proposal\\n    function setVote(uint8 _id) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"Voting not open\\\"\\n        );\\n        require(voters[msg.sender].hasVoted != true, \\\"Already voted\\\");\\n        require(_id < proposalsLength, \\\"Missing proposal\\\");\\n\\n        voters[msg.sender].votedProposalId = _id;\\n        voters[msg.sender].hasVoted = true;\\n        ++proposalsArray[_id].voteCount;\\n\\n        emit Voted(msg.sender, _id);\\n    }\\n\\n    // ::::::::::::: STATE ::::::::::::: //\\n\\n    /// @notice Start the proposals registration phase\\n    /// @dev Only the owner of the contract can use this method\\n    function startProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Registering proposals cant be now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\\n\\n        Proposal memory proposal;\\n        proposal.description = \\\"GENESIS\\\";\\n        proposalsArray[proposalsLength] = proposal;\\n        ++proposalsLength;\\n\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.RegisteringVoters,\\n            WorkflowStatus.ProposalsRegistrationStarted\\n        );\\n    }\\n\\n    /// @notice End the proposals registration phase\\n    /// @dev Only the owner of the contract can use this method\\n    function endProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"End registering proposals cant be now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationStarted,\\n            WorkflowStatus.ProposalsRegistrationEnded\\n        );\\n    }\\n\\n    /// @notice Start the voting session phase after the proposal registration ended\\n    /// @dev Only the owner of the contract can use this method\\n    function startVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationEnded,\\n            \\\"Voting cant be now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationEnded,\\n            WorkflowStatus.VotingSessionStarted\\n        );\\n    }\\n\\n    /// @notice End the voting session phase\\n    /// @dev Only the owner of the contract can use this method\\n    function endVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"End voting cant be now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionStarted,\\n            WorkflowStatus.VotingSessionEnded\\n        );\\n    }\\n\\n    /// @notice Calculate the winning proposal after the vote phase ended\\n    /// @dev Only the owner of the contract can use this method. Size limit of proposalsArray avoid DOS risk.\\n    function tallyVotes() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionEnded,\\n            \\\"Tally votes cant be now\\\"\\n        );\\n        uint256 _winningProposalId;\\n        for (uint256 p = 0; p < proposalsLength; ++p) {\\n            if (\\n                proposalsArray[p].voteCount >\\n                proposalsArray[_winningProposalId].voteCount\\n            ) {\\n                _winningProposalId = p;\\n            }\\n        }\\n        winningProposalID = _winningProposalId;\\n\\n        workflowStatus = WorkflowStatus.VotesTallied;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionEnded,\\n            WorkflowStatus.VotesTallied\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8d835992824c50034d40e890510f3e32269a7906e12ad355f2b83e19c50f8d1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Flavia Gallois",
    "kind": "dev",
    "methods": {
      "addProposal(string)": {
        "details": "Only the registered voters can use this method",
        "params": {
          "_desc": "The description of the proposal made by the voter"
        }
      },
      "addVoter(address)": {
        "details": "Only the owner of the contract can use this method",
        "params": {
          "_addr": "The address of the voter to register"
        }
      },
      "endProposalsRegistering()": {
        "details": "Only the owner of the contract can use this method"
      },
      "endVotingSession()": {
        "details": "Only the owner of the contract can use this method"
      },
      "getOneProposal(uint8)": {
        "details": "Only the registered voters can use this method",
        "params": {
          "_id": "The identifier of a specific proposal"
        },
        "returns": {
          "_0": "Proposal which contains the description of the proposal and the number of votes it got so far"
        }
      },
      "getVoter(address)": {
        "details": "Only the registered voters can use this method",
        "params": {
          "_addr": "Address of the voter we look the information for"
        },
        "returns": {
          "_0": "Voter which contains the vote, registration status & voting status of a voter"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVote(uint8)": {
        "details": "Only the registered voters can use this method",
        "params": {
          "_id": "The identifier of the chosen proposal"
        }
      },
      "startProposalsRegistering()": {
        "details": "Only the owner of the contract can use this method"
      },
      "startVotingSession()": {
        "details": "Only the owner of the contract can use this method"
      },
      "tallyVotes()": {
        "details": "Only the owner of the contract can use this method. Size limit of proposalsArray avoid DOS risk."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A simple voting contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(string)": {
        "notice": "Add a proposal to the list of proposals voted"
      },
      "addVoter(address)": {
        "notice": "Add an address in the list of voters"
      },
      "endProposalsRegistering()": {
        "notice": "End the proposals registration phase"
      },
      "endVotingSession()": {
        "notice": "End the voting session phase"
      },
      "getOneProposal(uint8)": {
        "notice": "Get the information of a proposal"
      },
      "getVoter(address)": {
        "notice": "Get the information of a voter identified by his address."
      },
      "setVote(uint8)": {
        "notice": "Vote for a proposal"
      },
      "startProposalsRegistering()": {
        "notice": "Start the proposals registration phase"
      },
      "startVotingSession()": {
        "notice": "Start the voting session phase after the proposal registration ended"
      },
      "tallyVotes()": {
        "notice": "Calculate the winning proposal after the vote phase ended"
      }
    },
    "notice": "You can use this contract to organize a vote, for a small organization, in order to choose a proposal among several proposals (limited number) made by registered voters",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Voting.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 142,
        "contract": "contracts/Voting.sol:Voting",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 164,
        "contract": "contracts/Voting.sol:Voting",
        "label": "workflowStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)161"
      },
      {
        "astId": 169,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposalsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)154_storage)255_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposalsLength",
        "offset": 0,
        "slot": "513",
        "type": "t_uint256"
      },
      {
        "astId": 176,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "514",
        "type": "t_mapping(t_address,t_struct(Voter)149_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)154_storage)255_storage": {
        "base": "t_struct(Proposal)154_storage",
        "encoding": "inplace",
        "label": "struct Voting.Proposal[255]",
        "numberOfBytes": "16320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)161": {
        "encoding": "inplace",
        "label": "enum Voting.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)149_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)154_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 151,
            "contract": "contracts/Voting.sol:Voting",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 153,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)149_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 144,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/Voting.sol:Voting",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 148,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votedProposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}