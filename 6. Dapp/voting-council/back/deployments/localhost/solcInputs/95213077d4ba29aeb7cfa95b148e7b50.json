{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title A simple voting contract\n/// @author Flavia Gallois\n/// @notice You can use this contract to organize a vote, for a small organization, in order to choose a proposal among several proposals (limited number) made by registered voters\ncontract Voting is Ownable {\n    uint256 public winningProposalID;\n\n    struct Voter {\n        bool isRegistered;\n        bool hasVoted;\n        uint256 votedProposalId;\n    }\n\n    struct Proposal {\n        string description;\n        uint256 voteCount;\n    }\n\n    enum WorkflowStatus {\n        RegisteringVoters,\n        ProposalsRegistrationStarted,\n        ProposalsRegistrationEnded,\n        VotingSessionStarted,\n        VotingSessionEnded,\n        VotesTallied\n    }\n\n    WorkflowStatus public workflowStatus;\n\n    Proposal[255] internal proposalsArray;\n    uint256 internal proposalsLength;\n\n    mapping(address => Voter) internal voters;\n\n    event VoterRegistered(address voterAddress);\n    event WorkflowStatusChange(\n        WorkflowStatus previousStatus,\n        WorkflowStatus newStatus\n    );\n\n    event ProposalRegistered(uint256 proposalId);\n    event Voted(address voter, uint8 proposalId);\n\n    modifier onlyVoters() {\n        require(voters[msg.sender].isRegistered, \"Not a voter\");\n        _;\n    }\n\n    // ::::::::::::: GETTERS ::::::::::::: //\n\n    /// @notice Get the information of a voter identified by his address.\n    /// @dev Only the registered voters can use this method\n    /// @param _addr Address of the voter we look the information for\n    /// @return Voter which contains the vote, registration status & voting status of a voter\n    function getVoter(address _addr)\n        external\n        view\n        onlyVoters\n        returns (Voter memory)\n    {\n        return voters[_addr];\n    }\n\n    /// @notice Get the information of a proposal\n    /// @dev Only the registered voters can use this method\n    /// @param _id The identifier of a specific proposal\n    /// @return Proposal which contains the description of the proposal and the number of votes it got so far\n    function getOneProposal(uint8 _id)\n        external\n        view\n        onlyVoters\n        returns (Proposal memory)\n    {\n        return proposalsArray[_id];\n    }\n\n    // ::::::::::::: REGISTRATION ::::::::::::: //\n\n    /// @notice Add an address in the list of voters\n    /// @dev Only the owner of the contract can use this method\n    /// @param _addr The address of the voter to register\n    function addVoter(address _addr) external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.RegisteringVoters,\n            \"Voters registration not open\"\n        );\n        require(voters[_addr].isRegistered != true, \"Already registered\");\n\n        voters[_addr].isRegistered = true;\n        emit VoterRegistered(_addr);\n    }\n\n    // ::::::::::::: PROPOSAL ::::::::::::: //\n\n    /// @notice Add a proposal to the list of proposals voted\n    /// @dev Only the registered voters can use this method\n    /// @param _desc The description of the proposal made by the voter\n    function addProposal(string calldata _desc) external onlyVoters {\n        require(\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\n            \"Proposals session not open\"\n        );\n        require(bytes(_desc).length > 0, \"Missing description\");\n\n        Proposal memory proposal;\n        proposal.description = _desc;\n        proposalsArray[proposalsLength] = proposal;\n        ++proposalsLength;\n        emit ProposalRegistered(proposalsLength - 1);\n    }\n\n    // ::::::::::::: VOTE ::::::::::::: //\n\n    /// @notice Vote for a proposal\n    /// @dev Only the registered voters can use this method\n    /// @param _id The identifier of the chosen proposal\n    function setVote(uint8 _id) external onlyVoters {\n        require(\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\n            \"Voting not open\"\n        );\n        require(voters[msg.sender].hasVoted != true, \"Already voted\");\n        require(_id < proposalsLength, \"Missing proposal\");\n\n        voters[msg.sender].votedProposalId = _id;\n        voters[msg.sender].hasVoted = true;\n        ++proposalsArray[_id].voteCount;\n\n        emit Voted(msg.sender, _id);\n    }\n\n    // ::::::::::::: STATE ::::::::::::: //\n\n    /// @notice Start the proposals registration phase\n    /// @dev Only the owner of the contract can use this method\n    function startProposalsRegistering() external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.RegisteringVoters,\n            \"Registering proposals cant be now\"\n        );\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\n\n        Proposal memory proposal;\n        proposal.description = \"GENESIS\";\n        proposalsArray[proposalsLength];\n        ++proposalsLength;\n\n        emit WorkflowStatusChange(\n            WorkflowStatus.RegisteringVoters,\n            WorkflowStatus.ProposalsRegistrationStarted\n        );\n    }\n\n    /// @notice End the proposals registration phase\n    /// @dev Only the owner of the contract can use this method\n    function endProposalsRegistering() external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\n            \"End registering proposals cant be now\"\n        );\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\n        emit WorkflowStatusChange(\n            WorkflowStatus.ProposalsRegistrationStarted,\n            WorkflowStatus.ProposalsRegistrationEnded\n        );\n    }\n\n    /// @notice Start the voting session phase after the proposal registration ended\n    /// @dev Only the owner of the contract can use this method\n    function startVotingSession() external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.ProposalsRegistrationEnded,\n            \"Voting cant be now\"\n        );\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\n        emit WorkflowStatusChange(\n            WorkflowStatus.ProposalsRegistrationEnded,\n            WorkflowStatus.VotingSessionStarted\n        );\n    }\n\n    /// @notice End the voting session phase\n    /// @dev Only the owner of the contract can use this method\n    function endVotingSession() external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\n            \"End voting cant be now\"\n        );\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\n        emit WorkflowStatusChange(\n            WorkflowStatus.VotingSessionStarted,\n            WorkflowStatus.VotingSessionEnded\n        );\n    }\n\n    /// @notice Calculate the winning proposal after the vote phase ended\n    /// @dev Only the owner of the contract can use this method. Size limit of proposalsArray avoid DOS risk.\n    function tallyVotes() external onlyOwner {\n        require(\n            workflowStatus == WorkflowStatus.VotingSessionEnded,\n            \"Tally votes cant be now\"\n        );\n        uint256 _winningProposalId;\n        for (uint256 p = 0; p < proposalsLength; ++p) {\n            if (\n                proposalsArray[p].voteCount >\n                proposalsArray[_winningProposalId].voteCount\n            ) {\n                _winningProposalId = p;\n            }\n        }\n        winningProposalID = _winningProposalId;\n\n        workflowStatus = WorkflowStatus.VotesTallied;\n        emit WorkflowStatusChange(\n            WorkflowStatus.VotingSessionEnded,\n            WorkflowStatus.VotesTallied\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}